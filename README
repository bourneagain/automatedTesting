<<<<<<< HEAD
This directory contains a set of sanity tests for the functions included in /scripts/includeFunction.sh
The list of testcases are populated under test.config file
Success / Failure of the tests are made available in the directory /scripts/tests/logs
They are named <functionName>.log and a summary of tests run of the format  <DATE>|<[INFO|SUCCESS|FAILURE|PASS|ERROR]>|TEST_LOG
=======
About
-----
The project aimed to do an empirical study of Ekstazi tool by running the tool across multiple projects and revisions. The respective project results are then compared against executions without the Ekstazi tool with respect to test reduction time and reduction count. 
The report details the approach we have followed from the initial discussion with Professors and TA, through the evolution of code and finally analyzing the results:0
.

Project approach
-----------------
We started our project by working to create automated scripts which can execute tests ( without Ekstazi changes ) across a number of revisions for some given list of projects and gather test results. We had planned to target GIT + Maven projects first and then extend to SVN + Maven and other combinations.
To execute the same set of projects with Ekstazi pom changes, we initially made manual pom changes for few projects and compared the results. To automated this process, we planned to have a set of reference poms for each project and use it for subsequent revisions.

Procedure followed for populating reference poms.
------------------------------------------------
We start with the pom changes for the base revision of the project. 
As long as the pom for the next successive revision match the base revision pom, we can directly use the pom changes made on the base revision to execute. We found this observation to hold true for many projects and thus implemented the code which compares the poms across revision and in case they are found to be same, it saves the modified pom of the base version to be used for the respective version. This procedure is followed only once per project and revision. For successive test runs, we thus avoid prompting the user with vimdiff as long as have saved revision. 

Learning from progress1 report
------------------------------
Change in the order of execution.
During the execution without Ekstazi , the order of execution ( older to newer or otherwise ) does not matter much, for execution with Ekstazi changes, we need the order of execution to be from older to newer to properly gauge the performance of Ekstazi. 

Preserving the Ekstazi dependencies and sanitizing the clone.
---------------------------------------------------------------
We had to include the check to clean the clone after every execution to prevent any undesirable effects of stale. Also since the Ekstazi depends on the exclusion list under .Ekstazi, we had to move around the folder before cleaning the directory and bring it back at the appropriate location before each execution. There was a challenge in code to extend this functionality even in cases where we had multiple .Ekstazi folders under various sub modules.

Populating fresh snapshots
---------------------------
Some times it was observed that the saved snapshots were older and had to be reinstalled. This was fixed by adding mvn install -DskipTests prior to test execution.

The above learnings were applied in code for SVN repositories as well.

Learnings from progress2 and progress3
-----------------------------------------
Change in execution time calculation:
-------------------------------------
The script was calculating thus far the total time elapsed by the summation of time taken for each individual test per revision. This was wrong since for runs executed with Ektazi , the time elapsed always will be zero in case it selects no test case to run. Instead we modified the code to calculate time taken by reading the maven test summary result directly. The script has been corrected and tables updated for all the previous run. 

Change in POM modification code.
----------------------------------
We were made aware of another team working in parallel to modify the pom for Ekstazi. The team had used java pom parser code to directly modify / append pom as per the requirements. While our method of populating a reference pom and using the saved reference poms for subsequent execution still works, we tried to integrate their parser logic into our project for the pom modification module of the code alone. 

We started with few projects where the team had reported success using their tool. We compared the results of executions with our code and with their tool and found it to be same for the initial set of projects. We now support both the methods of executing tests for Ekstazi with an optional flag passed at runtime to either make use of reference POMs or modifiy poms directly using their tool.

Project Directory Structure:
----------------------------------------
All our scripts are available under the “scripts” directory
All execution logs uploaded under “logs” directory and is organized as below.
/repoDir
	This is the default location where the repositories are cloned by the script. Please note this directory is under svn ignore list.

/wEkstazi & /woEkstazi
	The two directories contain the execution logs for with Ekstazi changes and without respectively. Their nomenclature is in <project>_<with/withoutEkstazi>.log format.

/issues
	This contains the results of few projects where failures were observed during execution. They also contain the re run logs of projects available under wEkstazi/woEkstazi directories

/pomReferenceDir
	We store every project’s reference pom here. They are structured as
Pom modified for Ekstazi is saved under
	<project_directory>/SHA/BASE_<base_revision_number/SHA>/<project_module(if_present)>/<pom_file>
Base version POM , saved to compare against successive revisions saved under,
	<project_directory>/<project_module(if_present)>/<pom_file>
	
import.csv
	This file contains the cummulative tabulated execution result. The same file is the source for Tableau charts uploaded online.
 
Script / Code execution details
-----------------------------
includeFunctions.sh
All the functions used in the code are available in this file. They are included in the wrapper scripts demoWithEkstazi.sh and demo.sh 
Of the 23 helper functions, listing few groups of important functions which have been unit tested well.

Repository related functions.
-----------------------------
pullClone() 
Input args : 3 : <repoType> <cloneUrl> <ProjectDirectoryName>
About : creates a new clone for the given <cloneUrl> under <ProjectDirectoryName>

getLastNCommits()
Input args : 1 : <repoType>
About : Fetches the last <REVCOUNT> number of revision numbers in chronological order.
[ Note the default git / svn log displays in reverse chronological order ] . This order is important for Ekstazi so that we can see the test reduction properly.

cloneCheckout()
Input args : 1 : <repoType> <SHA/revisionNumber>
About : This checkouts the given <SHA/revisionNumber> as per the <repoType>

checkAndCloneRepo()
About : Wrapper function which checks for presence of already existing clone and invokes pullClone otherwise.

Generic Helper Functions.
getInputs()
About: Helper function which gathers all the necesary inputs and initializes the global variables.

coloredEcho()
About : This function is used to print the test execution output in different color on the console for easy viewing. 
The below functions operate over the below project scope global variable as set by the getInputs function.


Functions related to Ekstazi
---------------------------------
installEkstazi()
Input args : 1 <ekstaziVersion>
About : Installs ekstazi for the given <ekstaziVersion> from mir.cs.illinois.edu/gliga/projects/ekstazi/release/ under the $HOME/.m2/repository directory

runWithEkstazi()
About : Main wrapper function which executes the test for ${REVCOUNT} number of revisions with Ekstazi pom changes. 
This intern invokes the below helper functions.

cloneCleanup()
About : This function is used to cleanup the local files generated during the testing process.

backupEkstazi()
About : Backups all the .ekstazi folders under the project directory to /tmp/<project>. This function is called prior to cloneCleanup()

restoreEkstazi()
About : Restores all the .ekstazi folder for the given project from /tmp/<project> to all the respective modules. This function is called prior to test execution during Ekstazi runs.

copyPOMAndExecute()
About : This function replaces the current version’s pom with the saved pom for the project under pomReferenceDir. This function is invoked only if the main code is executed with reference pom flag set i.e no “auto” flag set.

updatePOMandExecuteRun()
About : This function modifies the pom as per Ekstazi requirements and executed only when main code is executed with “auto” flag set. This makes use of the other team’s pom parser code to modify the pom.

removeEkstaziDir()
About : Used to remove the /tmp/<project>/<.ekstazifolders> prior to the start of test execution

resyncPom()
About : This is a wrapper function to invoke cloneCleanup() and cloneCheckout() functions. It also takes care to remove the temporary pom changes that occur during the ekstazi executions with the help of repullPom() function.

repullPom()
About : Function to update only the modified poms in the clone. 

saveReferencePOMS()
About : Function which compares the checked out revisions poms against respective project’s base version reference poms saved under pomReferenceDir and prompts the user to save the changes for Ekstazi related modifications. It does not prompt if the revision’s modified pom is already available in repo and hence the user prompt occurs only once.

>>>>>>> 460224a64bd26e7b4d42ca03620d52b4b91fac2b
